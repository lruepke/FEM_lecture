{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1584b181",
   "metadata": {},
   "source": [
    "# 2-D FEM coordinate and connectivity matrices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "12d98e89",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5397adc",
   "metadata": {},
   "source": [
    "Let's first create the global coordinate vector. The columns refer to the nodes, and the rows to the x,y coordinates. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "4e47179e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.         0.        ]\n",
      " [0.33333333 0.        ]\n",
      " [0.66666667 0.        ]\n",
      " [1.         0.        ]\n",
      " [0.         0.33333333]\n",
      " [0.33333333 0.33333333]\n",
      " [0.66666667 0.33333333]\n",
      " [1.         0.33333333]\n",
      " [0.         0.66666667]\n",
      " [0.33333333 0.66666667]\n",
      " [0.66666667 0.66666667]\n",
      " [1.         0.66666667]\n",
      " [0.         1.        ]\n",
      " [0.33333333 1.        ]\n",
      " [0.66666667 1.        ]\n",
      " [1.         1.        ]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(16, 2)"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lx          = 1\n",
    "ly          = 1\n",
    "nx          = 4\n",
    "ny          = 4\n",
    "nnodel      = 4\n",
    "dx          = lx/(nx-1)\n",
    "dy          = ly/(ny-1)\n",
    "\n",
    "nex         = nx-1\n",
    "ney         = ny-1\n",
    "nnod        = nx*ny\n",
    "nel         = nex*ney\n",
    "GCOORD      = np.zeros((nnod,2))\n",
    "\n",
    "id = 0\n",
    "\n",
    "for i in range(0,ny):\n",
    "    for j in range(0,nx):\n",
    "        GCOORD[id,0] = j*dx;\n",
    "        GCOORD[id,1] = i*dy;\n",
    "        id          = id + 1;\n",
    "                       \n",
    "print(GCOORD)\n",
    "GCOORD.shape\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3cf4cb2e",
   "metadata": {},
   "source": [
    "Now we do the connectivity:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "b388b4e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0  4  5  1]\n",
      " [ 1  5  6  2]\n",
      " [ 2  6  7  3]\n",
      " [ 4  8  9  5]\n",
      " [ 5  9 10  6]\n",
      " [ 6 10 11  7]\n",
      " [ 8 12 13  9]\n",
      " [ 9 13 14 10]\n",
      " [10 14 15 11]]\n",
      "(9, 4)\n",
      "[0.         0.         0.33333333 0.33333333]\n"
     ]
    }
   ],
   "source": [
    "E2N   = np.zeros((nel,nnodel), dtype=int)\n",
    "\n",
    "for iel in range(0,nel):\n",
    "    col        = np.ceil((iel+1)/ney)\n",
    "    ind        = iel + col-1\n",
    "    E2N[iel,:] = [ind, ind+ny, ind+ny+1, ind+1]\n",
    "\n",
    "\n",
    "print(E2N)\n",
    "print(E2N.shape)\n",
    "# x coordinates of first element\n",
    "# insights into indexing: https://kanoki.org/2020/07/05/numpy-index-array-with-another-array/\n",
    "# https://realpython.com/numpy-array-programming/\n",
    "# and something on ordering arrays\n",
    "# https://stackoverflow.com/questions/26998223/what-is-the-difference-between-contiguous-and-non-contiguous-arrays\n",
    "print(np.take(GCOORD[:,0], E2N[0,:]))\n",
    "\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "d1cefad9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5, 5)\n"
     ]
    }
   ],
   "source": [
    "A = np.array([[0.32, 0.35, 0.88, 0.63, 1.  ],\n",
    "              [0.23, 0.69, 0.98, 0.22, 0.96],\n",
    "              [0.7 , 0.51, 0.09, 0.58, 0.19],\n",
    "              [0.98, 0.42, 0.62, 0.94, 0.46],\n",
    "              [0.48, 0.59, 0.17, 0.23, 0.98]])\n",
    "print(A.shape)\n",
    "B = np.array([[4, 0, 3, 2, 1],\n",
    "              [3, 2, 4, 1, 0],\n",
    "              [4, 3, 0, 2, 1],\n",
    "              [4, 2, 0, 3, 1],\n",
    "              [0, 3, 1, 2, 4]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "ab38f1c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.  , 0.32, 0.63, 0.88, 0.35],\n",
       "       [0.22, 0.98, 0.96, 0.69, 0.23],\n",
       "       [0.19, 0.58, 0.7 , 0.09, 0.51],\n",
       "       [0.46, 0.62, 0.98, 0.94, 0.42],\n",
       "       [0.48, 0.23, 0.59, 0.17, 0.98]])"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m,n = A.shape\n",
    "B + n*np.arange(m)[:,None]\n",
    "np.take(A,B + n*np.arange(m)[:,None])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "3d9ef2a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 4,  0,  3,  2,  1],\n",
       "       [ 8,  7,  9,  6,  5],\n",
       "       [14, 13, 10, 12, 11],\n",
       "       [19, 17, 15, 18, 16],\n",
       "       [20, 23, 21, 22, 24]])"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "B + n*np.arange(m)[:,None]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "997c2b3d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 1]\n",
      " [2 3]]\n"
     ]
    }
   ],
   "source": [
    "B = np.arange(4)\n",
    "B = B.reshape(2,2)\n",
    "print(B)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "2b65fd13",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "print(B[1,0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed6e250a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "py37_fem_class",
   "language": "python",
   "name": "py37_fem_class"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
